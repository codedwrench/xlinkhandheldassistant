---
# -- General Maintenance --

# One way to ensure the system is reliable just after a reboot, is to set WinRM to a delayed startup
- name: Ensure WinRM starts when the system has settled and is ready to work reliably
  ansible.windows.win_service:
    name: WinRM
    start_mode: delayed

# Make sure system is up-to-date, do this 3 times because windows is windows and likes to magically come up with
# updates
- name: Install all security, critical, and rollup updates
  ansible.windows.win_updates:
    category_names:
      - SecurityUpdates
      - CriticalUpdates
      - UpdateRollups
    reboot: true
    reboot_timeout: 3600
  register: update_result
  when: update_result is not defined or not update_result.found_update_count == 0
  loop: "{{ range(0, 3, 1) | list }}"

# -- Installing base --

# Sadly these packages have no way to install it to a different location
- name: Install 7-Zip
  chocolatey.chocolatey.win_chocolatey:
    name: 7zip
    state: present

- name: Install Git
  chocolatey.chocolatey.win_chocolatey:
    name: git
    state: present

- name: Ensure ssh folder exists
  ansible.windows.win_file:
    path: "{{ ssh_key_location }}"
    state: directory

- name: Copy server private key
  ansible.windows.win_copy:
    dest: "{{ ssh_key_location }}\\id_rsa"
    operation: file_copy
    src: id_rsa.vault

- name: Install MSYS and dependencies
  import_tasks: base_scripts/install_msys2.yml

- name: Ensure install_dir exists
  ansible.windows.win_file:
    path: "{{ drive }}:\\{{ install_dir }}"
    state: directory

# -- Static libs --

# SDK
# TODO: Probably should do a version check at some point instead
- name: Check if NPCAP SDK is installed
  ansible.windows.win_stat:
    path: "{{ drive }}:\\{{ install_dir }}\\npcapsdk"
  register: npcap_sdk_exists

- name: Download NPCAP SDK
  ansible.windows.win_get_url:
    dest: "{{ drive }}:\\{{ install_dir }}\\npcapsdk.zip"
    url: https://npcap.com/dist/npcap-sdk-{{ npcapsdk_version }}.zip
  register: npcapsdk_download_result
  when: (npcap_sdk_exists is defined) and (not npcap_sdk_exists.stat.exists)

- name: Unzip NPCAP SDK
  community.windows.win_unzip:
    delete_archive: true
    src: "{{ drive }}:\\{{ install_dir }}\\npcapsdk.zip"
    dest: "{{ drive }}:\\{{ install_dir }}\\npcapsdk"
  when: npcapsdk_download_result.msg is defined and npcapsdk_download_result.msg == "OK"

- name: Check if wpcap.dll exists
  ansible.windows.win_stat:
    path: "{{ drive }}:\\{{ install_dir }}\\npcapsdk\\wpcap.dll"
  register: npcap_dll_exists

- name: Install wpcap.dll
  ansible.builtin.import_tasks: base_scripts/install_wpcapdll.yml
  when: (npcap_dll_exists.stat.exists is defined) and (not npcap_dll_exists.stat.exists)

# TODO: Probably should do a version check at some point instead
- name: Check if PDCurses is installed
  ansible.windows.win_stat:
    path: "{{ drive }}:\\{{ install_dir }}\\pdcurses"
  register: pdcurses_exists

- name: Install PDCurses
  ansible.builtin.import_tasks: base_scripts/install_pdcurses.yml
  when: (pdcurses_exists.stat is defined) and (not pdcurses_exists.stat.exists)

# TODO: Probably should do a version check at some point instead
- name: Check if Boost is installed
  ansible.windows.win_stat:
    path: "{{ drive }}:\\{{ install_dir }}\\boost"
  register: boost_exists

- name: Install Boost
  ansible.builtin.import_tasks: base_scripts/install_boost.yml
  when: (boost_exists.stat is defined) and (not boost_exists.stat.exists)
